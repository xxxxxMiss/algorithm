/* 
????????? 2-9 ???????????????????

???????????????????????? 1 ????????
??:

???"23"
???["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
??:
?????????????????????????????????

??????LeetCode?
???https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number
??????????????????????????????????
*/

function letterCombinations(digits) {
  const map = new Map()
  map.set('2', 'abc')
  map.set('3', 'def')
  map.set('4', 'ghi')
  map.set('5', 'jkl')
  map.set('6', 'mno')
  map.set('7', 'pqrs')
  map.set('8', 'tuv')
  map.set('9', 'wxyz')

  const result = []

  function backtrack(combination, nextDigits) {
    if (nextDigits.length === 0) {
      result.push(combination)
    } else {
      const dgt = nextDigits.substring(0, 1)
      const letters = map.get(dgt)
      for (let i = 0; i < letters.length; i++) {
        const letter = map.get(dgt).substring(i, i + 1)
        backtrack(combination + letter, nextDigits.substring(1))
      }
    }
  }

  backtrack('', digits)
  return result
}
// console.log(letterCombinations('23'))

/* 
??? 8x8 ????????? 8 ????????????????????????????
 */
const result = []
function cal8Queens(row = 0) {
  if (row === 8) {
    printQueens()
    return
  }
  for (let column = 0; column < 8; column++) {
    if (isOk(row, column)) {
      result[row] = column
      cal8Queens(row + 1)
    }
  }
}
function isOk(row, column) {
  let leftup = column - 1
  let rightup = column + 1
  for (let i = row - 1; i >= 0; i--) {
    if (result[i] === column) return false
    if (leftup >= 0) {
      if (result[i] === leftup) return false
    }
    if (rightup < 8) {
      if (result[i] === rightup) return false
    }
    leftup--
    rightup--
  }
  return true
}
function printQueens() {
  const res = []
  for (let i = 0; i < 8; i++) {
    const row = []
    for (let j = 0; j < 8; j++) {
      if (result[i] === j) {
        row.push('Q')
      } else {
        row.push('*')
      }
    }
    res.push(row.join(' '))
  }
  console.log(res)
  console.log()
  console.log()
}
// cal8Queens()

// 0-1????
/* 
????????????????? Wkg??????n?????????????????????
?????????????????????????????????????? 
*/
let maxWeight = 0
function npackage(
  w /* ???????? */,
  ws = [2, 2, 4, 6, 3, 5] /* ???? */
) {
  function helper(currentW = 0, i = 0) {
    if (currentW === w || i === ws.length) {
      if (currentW > maxWeight) {
        maxWeight = currentW
      }
      return
    }

    helper(currentW, i + 1)
    if (currentW + ws[i] <= w) {
      helper(currentW + ws[i], i + 1)
    }
  }
  helper()
}
npackage(21)
console.log(maxWeight)
